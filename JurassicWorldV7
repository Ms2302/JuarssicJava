/*
Author - Marco Giovanni Solari
Date - 10/11/2020
Time - 11:28am
Version 5.0
This program generates a jurassic world environment for the user, they must survive certain amount of rounds
*/
import java.util.Scanner;
import  java.io.*;

class DinoWorld{//Main record with dinosaur values


    String DinosaurName;
    int CalmnessScore;
    int HungerLevel;
    int DangerLevel = 0;


}


class JurassicWorldV7 {//Main class that contains program
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int WinRound = (int) (Math.random() * ((10 - 5) + 1)) + 5;

        ProgramInfo(WinRound);
        System.out.println("\n");




        GetSave();//gets the file we read from
        System.out.println();
        Scanner count = new Scanner(System.in);
        System.out.println("Enter amount of dinosaurs to create (Max 5) :");
        int counter = count.nextInt();
        // Dinosaur array created





        DinoWorld[] array = CreateDinoWorld(counter);
        DinoWorld(array);






        loop(array, WinRound);//main method called

    }


    public static void GetSave(){//Reads from the file and throws an exception if not found
        try {
            File myObj = new File("Scores.txt");
            Scanner myReader = new Scanner(myObj);
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                System.out.println(data);
            }
            myReader.close();
        }catch (FileNotFoundException e){
            System.out.println("An error occurred");

        }
    }

    public static void Save_Score(int Rounds){//Takes the amount of rounds survived at the end of the program and saves it to the file

        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter name: ");
        String name = scanner.nextLine();
        try {
            FileWriter myWriter = new FileWriter("Scores.txt");

            myWriter.write(name + " survived for " + Rounds + " Rounds!");
            myWriter.close();
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }

    }

    public static DinoWorld[] CreateDinoWorld(int range){//method that creates the abstract data type
        DinoWorld[] array = new DinoWorld[range];
        return array;
    }



    public static int DinoChoice(DinoWorld[] array){//Creates a random number to select a dinosaur
        Scanner scanner = new Scanner(System.in);
        System.out.println("Current Dinosaurs:");
        for(int i = 0; i <= array.length - 1 ; i++){

            System.out.println(i +1 + ":" + array[i].DinosaurName+ " Calmness: " + array[i].CalmnessScore+ " Hunger: " + array[i].HungerLevel);
        }
        System.out.println("please pick Dinosaur");
        int choice = scanner.nextInt();
        choice -= 1;


        return choice;
    }



    public static void ProgramInfo(int WinRound) {//Displays info for user
        System.out.println("Hi there, this program is designed to simulate a virtual world of your own dinosaurs that need to be cared for." +
                " We hope you enjoy this program! ");
        System.out.println("To survive this game you must last " + WinRound + " rounds. Good Luck!");
    }

    public static void  DinoWorld(DinoWorld[] array) {//Names first dinosaur
        for(int i = 0; i <= array.length -1; i++){//for loop to fill abstract data type

            Scanner scanner = new Scanner(System.in);
            System.out.println("Enter Dinosaur name:");
            String Name = scanner.nextLine();

            System.out.println("Enter " + Name + " Calmness level:");
            int Calmness = scanner.nextInt();

            System.out.println("Enter " + Name + " Hunger Level:");
            int Hunger = scanner.nextInt();
            array[i] = new DinoWorld();
            array[i].DinosaurName = Name;
            array[i].CalmnessScore = Calmness;
            array[i].HungerLevel = Hunger;

        }




    }

    public static void DinosaurStatus(DinoWorld[] array, int i) {//Shows status of Dinosaur

        if (array[i].CalmnessScore <= 2 && array[i].HungerLevel <= 2 ){
            System.out.println((array[i].DinosaurName) + " is looking like a killer!");
            array[i].DangerLevel = 5;
            System.out.println("You lose");
            System.exit(0);//Game over
        } else if (array[i].CalmnessScore < 4 &&array[i].HungerLevel < 4) {
            array[i].DangerLevel = 4;
            System.out.println((array[i].DinosaurName) + " is looking dangerous, be careful");
        } else if (array[i].CalmnessScore < 7 && array[i].HungerLevel < 7) {
            array[i].DangerLevel = 3;
            System.out.println((array[i].DinosaurName) + " is aroused");
        } else {
            System.out.println((array[i].DinosaurName) + " is very calm :)");
        }
    }


    public static void SoothDinosaur(DinoWorld[] array, int choice) {//Method to sooth dinosaur

        int SoothSuccess = (int) (Math.random() * ((3) + 1));
        System.out.println("Soothed "+(array[choice].DinosaurName) + " By " + SoothSuccess+ " points");
        array[choice].CalmnessScore += SoothSuccess;



    }

    public static void FeedDinosaur(DinoWorld[] array, int choice){//Method to feed dinosaur

        int FeedSuccess = (int) (Math.random() * ((3) + 1));
        System.out.println("Fed "+(array[choice].DinosaurName) + " By " + FeedSuccess+ " points");
        array[choice].HungerLevel += FeedSuccess;



    }




    public static void sort(DinoWorld[] array, int count){
        int i, j;
        DinoWorld temp;
        if(count ==1){
            for(i = 0; i < array.length; i++){
                for (j=0; j < array.length-1; j++){
                    if (array[j].DangerLevel > array[j+1].DangerLevel){
                        temp = array[j];
                        array[j] = array[j+1];
                        array[j+1] = temp;
                    }
                }
            }

            for(i=0; i< array.length; i++){
                System.out.println(array[i].DinosaurName + " Danger: " + array[i].DangerLevel);
            }

        }
    }



    public static void RoundChange(DinoWorld[] array, int i) {//Calculates the changes each round
        int calmness = array[i].CalmnessScore;
        int hunger = array[i].HungerLevel;

        int Soothing = (int) (Math.random() * ((2 - (-3)) + 1) + (-3));//Random values created
        int HungerChange = (int) (Math.random() * ((2 - (-3)) + 1) + (-3));


        System.out.println(array[i].DinosaurName + " is soothed by " + Soothing);
        array[i].CalmnessScore += Soothing;
        array[i].HungerLevel += HungerChange;
        if (array[i].CalmnessScore >= 10) {
            array[i].CalmnessScore = 10;
        } else if (array[i].CalmnessScore <= 0) {
            array[i].CalmnessScore = 0;
        }
        if (hunger <= 0) {
            hunger = 0;

        }

        for (int k = 0; k <= array.length - 1; k++) {//for loop to check if dino is a killer
            if (array[k].CalmnessScore < 2 && array[k].HungerLevel < 3) {
                System.out.println((array[k].DinosaurName) + " is looking like a killer!");
                System.out.println("You lose");//lose game
                System.exit(0);

            }


        }
    }

    public static void RoundChoice(DinoWorld[] array, int choice ){//Player chooses what to change
        Scanner scanner = new Scanner(System.in);
        String Choice;
        System.out.println("Enter S to Sooth or F to feed:");
        Choice = scanner.nextLine();
        if(Choice.equals("S")){
            SoothDinosaur(array,choice);
        }
        else if(Choice.equals("F")){
            FeedDinosaur(array,choice);
        }
        else{
            System.out.println("Please enter one of the correct options");
            RoundChoice(array,choice);
        }

    }


    public static void loop(DinoWorld[] array, int WinRound) {//loop for game
        int Rounds_survived =0;

        for (int i = WinRound; i >= 0; i--) {//nested for loop changes round and completes methods per dino.
            int count = 0;

            System.out.println("Rounds left: " + i);
            Rounds_survived += 1;
            RoundChoice(array,DinoChoice(array));





            for(int j = 0; j<= array.length -1; j++){//For loop that completes all methods
                count += 1;
                //System.out.println("2nd loop");
                RoundChange(array,j);
                System.out.println();
                DinosaurStatus(array, j);
                System.out.println();
                sort(array,count);

            }




        }
        System.out.println("Congratulations you survived!!"); //player wins
        Save_Score(Rounds_survived);
    }

}
